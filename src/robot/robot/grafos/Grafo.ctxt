#BlueJ class context
comment0.params=
comment0.target=Grafo()
comment0.text=\r\n\ Constructor\ gen\u00E9rico\r\n
comment1.params=nNodos
comment1.target=Grafo(int)
comment1.text=\r\n\ Constructor\ de\ un\ nuevo\ grafo\ con\ en\ n\u00FAmero\ de\ nodos\ indicado\r\n\ @param\ nNodos\ N\u00FAmero\ de\ nodos\ del\ grafo\r\n
comment2.params=nInicio\ nDestino\ peso
comment2.target=void\ aniadirArista(int,\ int,\ int)
comment2.text=\r\n\ A\u00F1ade\ una\ nueva\ arista\ al\ grafo\r\n\ @param\ nInicio\ Nodo\ de\ inicio\r\n\ @param\ nDestino\ Nodo\ de\ destino\r\n\ @param\ peso\ Peso\ de\ la\ arista\r\n
comment3.params=nInicio\ nDestino
comment3.target=void\ borrarArista(int,\ int)
comment3.text=\r\n\ Borra\ la\ arista\ indicada\r\n\ @param\ nInicio\ Nodo\ de\ inicio\ de\ la\ arista\r\n\ @param\ nDestino\ Nodo\ de\ destino\ de\ la\ arista\r\n
comment4.params=n1\ n2
comment4.target=boolean\ esAdyacente(int,\ int)
comment4.text=\r\n\ Indica\ si\ dos\ nodos\ son\ adyacentes\r\n\ @param\ n1\ Primer\ nodo\r\n\ @param\ n2\ Segundo\ nodo\r\n\ @return\ Devuelve\ verdadero\ en\ caso\ de\ ser\ adyacentes\r\n
comment5.params=nodo
comment5.target=java.util.ArrayList\ adyacentes(int)
comment5.text=\r\n\ Devuelve\ una\ lista\ con\ los\ nodos\ adyacentes\ a\ uno\ dado\r\n\ @param\ nodo\ Nodo\ del\ que\ se\ quieren\ obtener\ los\ adyacentes\r\n\ @return\ Lista\ con\ los\ \r\n
comment6.params=nInicio\ nDestino
comment6.target=int\ peso(int,\ int)
comment6.text=\r\n\ Devuelve\ el\ peso\ de\ la\ arista\ de\ dos\ nodos\ adyacentes\r\n\ @param\ nInicio\ Nodo\ inicial\r\n\ @param\ nDestino\ Nodo\ destino\r\n\ @return\ El\ peso\ de\ la\ arista\r\n
comment7.params=
comment7.target=void\ imprimir()
comment7.text=\r\n\ Imprime\ la\ matriz\ de\ adyacencia\ del\ grafo\r\n
comment8.params=
comment8.target=int\ getNumeroNodos()
comment8.text=\r\n\ Obtiene\ el\ n\u00FAmero\ de\ nodos\ del\ grafo\r\n\ @return\ N\u00FAmero\ de\ nodos\r\n
numComments=9
